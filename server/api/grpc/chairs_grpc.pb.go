// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.1
// source: chairs.proto

package grpc_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChairServiceClient is the client API for ChairService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChairServiceClient interface {
	// CreateChair gets a chair by id
	CreateChair(ctx context.Context, in *CreateChairRequest, opts ...grpc.CallOption) (*CreateChairResponse, error)
	// GetChair gets a chair by id
	GetChair(ctx context.Context, in *GetChairRequest, opts ...grpc.CallOption) (*GetChairResponse, error)
	// ListChairs lists all chairs
	ListChairs(ctx context.Context, in *ListChairsRequest, opts ...grpc.CallOption) (*ListChairsResponse, error)
	// UpdateChair updates a chair
	UpdateChair(ctx context.Context, in *UpdateChairRequest, opts ...grpc.CallOption) (*UpdateChairResponse, error)
	// DeleteChair deletes a chair
	DeleteChair(ctx context.Context, in *DeleteChairRequest, opts ...grpc.CallOption) (*DeleteChairResponse, error)
}

type chairServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChairServiceClient(cc grpc.ClientConnInterface) ChairServiceClient {
	return &chairServiceClient{cc}
}

func (c *chairServiceClient) CreateChair(ctx context.Context, in *CreateChairRequest, opts ...grpc.CallOption) (*CreateChairResponse, error) {
	out := new(CreateChairResponse)
	err := c.cc.Invoke(ctx, "/chairs.v1.ChairService/CreateChair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chairServiceClient) GetChair(ctx context.Context, in *GetChairRequest, opts ...grpc.CallOption) (*GetChairResponse, error) {
	out := new(GetChairResponse)
	err := c.cc.Invoke(ctx, "/chairs.v1.ChairService/GetChair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chairServiceClient) ListChairs(ctx context.Context, in *ListChairsRequest, opts ...grpc.CallOption) (*ListChairsResponse, error) {
	out := new(ListChairsResponse)
	err := c.cc.Invoke(ctx, "/chairs.v1.ChairService/ListChairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chairServiceClient) UpdateChair(ctx context.Context, in *UpdateChairRequest, opts ...grpc.CallOption) (*UpdateChairResponse, error) {
	out := new(UpdateChairResponse)
	err := c.cc.Invoke(ctx, "/chairs.v1.ChairService/UpdateChair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chairServiceClient) DeleteChair(ctx context.Context, in *DeleteChairRequest, opts ...grpc.CallOption) (*DeleteChairResponse, error) {
	out := new(DeleteChairResponse)
	err := c.cc.Invoke(ctx, "/chairs.v1.ChairService/DeleteChair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChairServiceServer is the server API for ChairService service.
// All implementations must embed UnimplementedChairServiceServer
// for forward compatibility
type ChairServiceServer interface {
	// CreateChair gets a chair by id
	CreateChair(context.Context, *CreateChairRequest) (*CreateChairResponse, error)
	// GetChair gets a chair by id
	GetChair(context.Context, *GetChairRequest) (*GetChairResponse, error)
	// ListChairs lists all chairs
	ListChairs(context.Context, *ListChairsRequest) (*ListChairsResponse, error)
	// UpdateChair updates a chair
	UpdateChair(context.Context, *UpdateChairRequest) (*UpdateChairResponse, error)
	// DeleteChair deletes a chair
	DeleteChair(context.Context, *DeleteChairRequest) (*DeleteChairResponse, error)
	mustEmbedUnimplementedChairServiceServer()
}

// UnimplementedChairServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChairServiceServer struct {
}

func (UnimplementedChairServiceServer) CreateChair(context.Context, *CreateChairRequest) (*CreateChairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChair not implemented")
}
func (UnimplementedChairServiceServer) GetChair(context.Context, *GetChairRequest) (*GetChairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChair not implemented")
}
func (UnimplementedChairServiceServer) ListChairs(context.Context, *ListChairsRequest) (*ListChairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChairs not implemented")
}
func (UnimplementedChairServiceServer) UpdateChair(context.Context, *UpdateChairRequest) (*UpdateChairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChair not implemented")
}
func (UnimplementedChairServiceServer) DeleteChair(context.Context, *DeleteChairRequest) (*DeleteChairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChair not implemented")
}
func (UnimplementedChairServiceServer) mustEmbedUnimplementedChairServiceServer() {}

// UnsafeChairServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChairServiceServer will
// result in compilation errors.
type UnsafeChairServiceServer interface {
	mustEmbedUnimplementedChairServiceServer()
}

func RegisterChairServiceServer(s grpc.ServiceRegistrar, srv ChairServiceServer) {
	s.RegisterService(&ChairService_ServiceDesc, srv)
}

func _ChairService_CreateChair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChairServiceServer).CreateChair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chairs.v1.ChairService/CreateChair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChairServiceServer).CreateChair(ctx, req.(*CreateChairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChairService_GetChair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChairServiceServer).GetChair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chairs.v1.ChairService/GetChair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChairServiceServer).GetChair(ctx, req.(*GetChairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChairService_ListChairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChairServiceServer).ListChairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chairs.v1.ChairService/ListChairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChairServiceServer).ListChairs(ctx, req.(*ListChairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChairService_UpdateChair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChairServiceServer).UpdateChair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chairs.v1.ChairService/UpdateChair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChairServiceServer).UpdateChair(ctx, req.(*UpdateChairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChairService_DeleteChair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChairServiceServer).DeleteChair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chairs.v1.ChairService/DeleteChair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChairServiceServer).DeleteChair(ctx, req.(*DeleteChairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChairService_ServiceDesc is the grpc.ServiceDesc for ChairService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChairService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chairs.v1.ChairService",
	HandlerType: (*ChairServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChair",
			Handler:    _ChairService_CreateChair_Handler,
		},
		{
			MethodName: "GetChair",
			Handler:    _ChairService_GetChair_Handler,
		},
		{
			MethodName: "ListChairs",
			Handler:    _ChairService_ListChairs_Handler,
		},
		{
			MethodName: "UpdateChair",
			Handler:    _ChairService_UpdateChair_Handler,
		},
		{
			MethodName: "DeleteChair",
			Handler:    _ChairService_DeleteChair_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chairs.proto",
}
